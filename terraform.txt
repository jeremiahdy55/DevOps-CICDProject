## Define the ec2 instances to be provisioned by terraform: Jenkins instance, Kafka instance, EKS cluster

resource "aws_instance" "jenkins" {
  ami                         = var.ami_id
  instance_type               = var.instance_type_medium
  subnet_id                   = aws_subnet.public.id
  vpc_security_group_ids      = [aws_security_group.default.id]
#   key_name                    = aws_key_pair.deployer.key_name
  associate_public_ip_address = true
  iam_instance_profile        = aws_iam_instance_profile.jenkins_profile.name

  # Run these commands on creation
  user_data = <<-EOF
              #!/bin/bash

              sleep 30

              exec > /var/log/jenkins-data.log 2>&1 

              # System update
              sudo apt update -y
              sudo apt upgrade -y

              # Install Java 17, Maven, unzip, and Docker for Jenkins to run (Git is also here just in case)
              sudo apt install -y openjdk-17-jdk maven unzip docker.io git gnupg software-properties-common curl

              # Start Docker
              sudo systemctl start docker
              sudo systemctl enable docker

              # Install Terraform
              curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt update -y
              sudo apt install -y terraform

              # Install kubectl
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo chmod +x kubectl
              sudo mv kubectl /usr/local/bin/

              # Install AWS CLI
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              sudo rm -rf awscliv2.zip aws/

              # Add Jenkins repo and import GPG key
              curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
              echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

              # Install Jenkins
              sudo apt update -y
              sudo apt install -y jenkins

              # Enable Jenkins to use Docker (*user:jenkins can use Docker)
              sudo usermod -aG docker jenkins

              # Enable and start Jenkins
              sudo systemctl enable jenkins
              sudo systemctl start jenkins

              # Restart Jenkins just to make sure Jenkins can use Docker after (sudo usermod -aG docker jenkins)
              sleep 30
              sudo systemctl restart jenkins
              EOF

  tags = {
    Name = "Jenkins-Server-fromTF"
    Role = "jenkins"
  }

  root_block_device {
    volume_size = 24   # 24 GB Storage
    volume_type = "gp3"
  }


  depends_on = [
    aws_internet_gateway.igw,
    aws_route_table_association.public_assoc
  ]
}

resource "aws_instance" "kafka" {
  ami                         = var.ami_id
  instance_type               = var.instance_type_medium
  subnet_id                   = aws_subnet.public.id
  vpc_security_group_ids      = [aws_security_group.default.id]
#   key_name                    = aws_key_pair.deployer.key_name
  associate_public_ip_address = true

  # Run these commands on creation
  user_data = <<-EOF
              #!/bin/bash

              exec > >(tee /tmp/user_data.log|logger -t user_data -s 2>/dev/console) 2>&1

              sleep 30

              # Update system
              sudo apt update -y
              sudo apt upgrade -y

              # Install Java 17 for Jenkins to run
              sudo apt install -y openjdk-17-jdk

              # Create kafka user if not exists
              sudo id -u kafka &>/dev/null || sudo useradd -m -s /bin/bash kafka

              # Download the Kafka zip, unzip the file, and move it to the kafka directory and add permissions
              sudo apt install -y wget curl
              sudo wget https://archive.apache.org/dist/kafka/3.7.0/kafka_2.13-3.7.0.tgz -O /tmp/kafka.tgz
              mkdir -p /opt/kafka
              sudo tar -xzf /tmp/kafka.tgz -C /opt
              sudo mv /opt/kafka_2.13-3.7.0/* /opt/kafka/
              sudo rm -rf /opt/kafka_2.13-3.7.0
              chown -R kafka:kafka /opt/kafka            

              # Start Kafka Zookeeper as kafka user
              sudo -u kafka nohup /opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties > /tmp/zookeeper.log 2>&1 &

              # Sleep for a bit to allow Zookeeper to start
              sleep 30

              # Start Kafka Server as kafka user
              sudo -u kafka nohup /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties > /tmp/kafka.log 2>&1 &

              # Sleep for a bit to allow Kafka broker to start
              sleep 30
              
              # Create the Kafka topics
              sudo -u kafka /opt/kafka/bin/kafka-topics.sh --create --topic new-stock --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
              sudo -u kafka /opt/kafka/bin/kafka-topics.sh --create --topic reversed-stock --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
              sudo -u kafka /opt/kafka/bin/kafka-topics.sh --create --topic new-orders --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
              sudo -u kafka /opt/kafka/bin/kafka-topics.sh --create --topic reversed-orders --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
              sudo -u kafka /opt/kafka/bin/kafka-topics.sh --create --topic new-payments --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
              sudo -u kafka /opt/kafka/bin/kafka-topics.sh --create --topic reversed-payments --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1

              EOF

  tags = {
    Name = "Kafka-Server-fromTF"
    Role = "kafka"
  }

  root_block_device {
    volume_size = 24 # 24 GB Storage
    volume_type = "gp3"
  }

  depends_on = [
    aws_internet_gateway.igw,
    aws_route_table_association.public_assoc
  ]
}


# Previous code to provision ec2 instances for microservices, moved this responsibility to EKS cluster
# locals {
#   microservices = ["delivery-ms", "order-ms", "payment-ms", "stock-ms"]
# }

# resource "aws_instance" "microservice" {
#   for_each = toset(local.microservices)

#   ami                         = var.ami_id
#   instance_type               = var.instance_type_micro
#   subnet_id                   = aws_subnet.public.id
#   vpc_security_group_ids      = [aws_security_group.default.id]
# #   key_name                    = aws_key_pair.deployer.key_name
#   associate_public_ip_address = true

#   # Run these commands on creation
#   user_data = <<-EOF
#               #!/bin/bash
#               sleep 30
#               sudo apt update -y
#               sudo apt upgrade -y
#               EOF

#   tags = {
#     Name = each.key
#     Role = "microservice"
#   }

#   depends_on = [
#     aws_internet_gateway.igw,
#     aws_route_table_association.public_assoc
#   ]
# }
data "aws_eks_cluster" "cluster" {
  name = aws_eks_cluster.eks_cluster.name
}

data "aws_eks_cluster_auth" "cluster" {
  name = aws_eks_cluster.eks_cluster.name
}

resource "aws_eks_cluster" "eks_cluster" {
  name     = "my-eks-cluster"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids = [aws_subnet.public.id]
    endpoint_private_access = true
    endpoint_public_access  = true
    security_group_ids = [aws_security_group.eks_cluster_sg.id]
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_AmazonEKSClusterPolicy,
    aws_iam_role_policy_attachment.eks_cluster_AmazonEKSVPCResourceController
  ]
}

# IAM Role for EKS cluster control plane
resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "eks.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster_role.name
}

resource "aws_iam_role_policy_attachment" "eks_cluster_AmazonEKSVPCResourceController" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
  role       = aws_iam_role.eks_cluster_role.name
}

# Node group IAM role for worker nodes
resource "aws_iam_role" "eks_nodegroup_role" {
  name = "eks-nodegroup-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "nodegroup_AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_nodegroup_role.name
}

resource "aws_iam_role_policy_attachment" "nodegroup_AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_nodegroup_role.name
}

resource "aws_iam_role_policy_attachment" "nodegroup_AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_nodegroup_role.name
}

resource "aws_eks_node_group" "node_group" {
  cluster_name    = aws_eks_cluster.eks_cluster.name
  node_group_name = "eks-node-group"
  node_role_arn   = aws_iam_role.eks_nodegroup_role.arn
  subnet_ids      = [aws_subnet.public.id]

  resources {
    security_groups = [aws_security_group.eks_nodes_sg.id]
  }

  scaling_config {
    desired_size = 2
    max_size     = 4
    min_size     = 1
  }

  instance_types = ["t2.micro"]

  depends_on = [
    aws_eks_cluster.eks_cluster,
  ]
}
# IAM Role for Jenkins EC2 Instance to Access EKS and Other AWS Services
resource "aws_iam_role" "jenkins_role" {
  name = "jenkins-eks-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Attach Required Policies (EKS Full Access, EC2, IAM, VPC, CloudFormation for cluster bootstrap)
resource "aws_iam_role_policy_attachment" "eks_full_access" {
  role       = aws_iam_role.jenkins_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

resource "aws_iam_role_policy_attachment" "eks_service_policy" {
  role       = aws_iam_role.jenkins_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
}

resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
  role       = aws_iam_role.jenkins_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
}

resource "aws_iam_role_policy_attachment" "vpc_access" {
  role       = aws_iam_role.jenkins_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonVPCFullAccess"
}

resource "aws_iam_role_policy_attachment" "cloudformation_access" {
  role       = aws_iam_role.jenkins_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"
}

# resource "aws_iam_role_policy_attachment" "ecr_access" {
#   role       = aws_iam_role.jenkins_role.name
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
# }

# Create IAM Instance Profile
resource "aws_iam_instance_profile" "jenkins_profile" {
  name = "jenkins-ec2-instance-profile"
  role = aws_iam_role.jenkins_role.name
}
# Create VPC
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "main-vpc"
  }
}

# Create a public subnet
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-west-1b"

  tags = {
    Name = "public-subnet"
  }
}

# Create Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}

# Create Route Table
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "public-rt"
  }
}

# Associate Route Table with Public Subnet
resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}
output "jenkins_public_ip" {
  value = aws_instance.jenkins.public_ip
}

output "kafka_public_ip" {
  value = aws_instance.kafka.public_ip
}

output "microservices_public_ips" {
  value = { for key, value in aws_instance.microservice : key => value.public_ip }
}

output "vpc_id" {
  value = aws_vpc.main.id
}

output "subnet_id" {
  value = aws_subnet.public.id
}
provider "aws" {
  region = "us-west-1"
}
resource "aws_security_group" "default" {
  name        = "ci-cd-sg"
  description = "Allow SSH, HTTP, and Kafka ports"
  vpc_id = aws_vpc.main.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Kafka"
    from_port   = 9092
    to_port     = 9092
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Kafka Zookeeper"
    from_port   = 2181
    to_port     = 2181
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Jenkins UI"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "ms access: 8081"
    from_port   = 8081
    to_port     = 8081
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


ingress {
    description = "ms access: 8082"
    from_port   = 8082
    to_port     = 8082
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


ingress {
    description = "ms access: 8083"
    from_port   = 8083
    to_port     = 8083
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


ingress {
    description = "ms access: 8084"
    from_port   = 8084
    to_port     = 8084
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "eks_cluster_sg" {
  name        = "eks-cluster-sg"
  vpc_id      = aws_vpc.main.id

  ingress {
    description      = "Allow worker nodes to communicate with EKS API"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    security_groups  = [aws_security_group.eks_nodes_sg.id]  # node group SG
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "eks_nodes_sg" {
  name        = "eks-nodes-sg"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 8081
    to_port     = 8081
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 8082
    to_port     = 8082
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 8083
    to_port     = 8083
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 8084
    to_port     = 8084
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

variable "ami_id" {
  description = "Ubuntu Server 24.04 LTS (HVM),EBS General Purpose (SSD) Volume Type for us-west-1"
  default     = "ami-014e30c8a36252ae5"
}

variable "instance_type_micro" {
  default = "t2.micro"
}

variable "instance_type_medium" {
  default = "t2.medium"
}
